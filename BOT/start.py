import telebot
from config import TOKEN, keys, keys_parser
from extensions import CurrencyConverter, ConvertionException

bot = telebot.TeleBot(TOKEN)
dict_keys = {}


@bot.message_handler(commands=['start', 'help'])
def help(message: telebot.types.Message):
    text = '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n–ò–º—è –≤–∞–ª—é—Ç—ã –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–≤–æ–¥–∏–º, \
–≤ –∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–µ—Ä–µ–≤–æ–¥–∏–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–π –≤–∞–ª—é—Ç—ã\n\
–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /button\n\
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å –≤–∞–ª—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /values\n\
–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /curs'
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['button'])
def button(message: telebot.types.Message):
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)
    item_1 = telebot.types.InlineKeyboardButton('üíµ USD ', callback_data='is.button_USD')
    item_2 = telebot.types.InlineKeyboardButton('üí∂ EUR', callback_data='is.button_EUR')
    item_3 = telebot.types.InlineKeyboardButton('üá∑üá∫ RUB', callback_data='is.button_RUB')
    markup.add(item_1, item_2, item_3)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('is'))
def callback(call):
    if call.data == 'is.button_USD':
        dict_keys['quote'] = '–î–æ–ª–ª–∞—Ä'
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        item_2 = telebot.types.InlineKeyboardButton('üí∂ EUR', callback_data='in.button_in_EUR')
        item_3 = telebot.types.InlineKeyboardButton('üá∑üá∫ RUB', callback_data='in.button_in_RUB')
        markup.add(item_2, item_3)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º', reply_markup=markup)
    elif call.data == 'is.button_EUR':
        dict_keys['quote'] = '–ï–≤—Ä–æ'
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        item_1 = telebot.types.InlineKeyboardButton('üíµ USD ', callback_data='in.button_in_USD')
        item_3 = telebot.types.InlineKeyboardButton('üá∑üá∫ RUB', callback_data='in.button_in_RUB')
        markup.add(item_1, item_3)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º', reply_markup=markup)
    elif call.data == 'is.button_RUB':
        dict_keys['quote'] = '–†—É–±–ª—å'
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        item_1 = telebot.types.InlineKeyboardButton('üíµ USD ', callback_data='in.button_in_USD')
        item_2 = telebot.types.InlineKeyboardButton('üí∂ EUR', callback_data='in.button_in_EUR')
        markup.add(item_1, item_2)
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('in'))
def callback2(call):
    if call.data == 'in.button_in_RUB':
        dict_keys['base'] = '–†—É–±–ª—å'
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
    if call.data == 'in.button_in_USD':
        dict_keys['base'] = '–î–æ–ª–ª–∞—Ä'
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')

    if call.data == 'in.button_in_EUR':
        dict_keys['base'] = '–ï–≤—Ä–æ'
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')


@bot.message_handler(commands=['values'])
def currency(message: telebot.types.Message):
    text = '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç:'
    for key in keys.keys():
        text = '\n'.join((text, key))
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['curs'])
def curs(message: telebot.types.Message):
    text = '–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å'
    for key, val in keys_parser.items():
        text = '\n'.join((text, f'{key} = {val} '))
    bot.send_message(message.chat.id, text)


@bot.message_handler(content_types=['text'])
def converted1(message: telebot.types.Message):
    values = message.text.title().split()

    if len(values) == 1:
        try:
            amount = message.text
            total_base2 = CurrencyConverter.converter(dict_keys['quote'], dict_keys['base'], amount)
            text = f'–¶–µ–Ω–∞ {amount} {dict_keys["quote"]} –≤ {dict_keys["base"]} = {str(round(total_base2, 2))}'
            bot.send_message(message.chat.id, text)
        except (ConvertionException, KeyError) as e:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ')

    elif len(values) != 3:
        try:
            raise ConvertionException('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–≤–Ω–æ —Ç—Ä–µ–º!')
        except ConvertionException as e:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n {e}')

    elif len(values) == 3:
        try:
            quote, base, amount = values
            total_base = CurrencyConverter.converter(quote, base, amount)
            text = f'–¶–µ–Ω–∞ {amount} {quote} –≤ {base} = {str(round(total_base, 2))}'
            bot.send_message(message.chat.id, text)
        except ConvertionException as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n {e}")


bot.polling()
